import React, { useState } from 'react';
import { useUIComponents, useCreateUIComponent, useUpdateUIComponent, useDeleteUIComponent, COMPONENT_CATEGORIES, COMPONENT_TYPES } from '@/hooks/useUIComponents';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { Plus, Edit, Trash2, Eye, BarChart3, Code, Settings } from 'lucide-react';
import { UiComponent, InsertUiComponent } from '@shared/schema';
import DynamicComponent from '@/components/dynamic/DynamicComponent';

export default function AdminComponents() {
  const { toast } = useToast();
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isPreviewDialogOpen, setIsPreviewDialogOpen] = useState(false);
  const [editingComponent, setEditingComponent] = useState<UiComponent | null>(null);
  const [previewComponent, setPreviewComponent] = useState<UiComponent | null>(null);
  const [previewData, setPreviewData] = useState('{}');\n\n  const { data: components, isLoading, error } = useUIComponents({\n    category: selectedCategory || undefined,\n  });\n\n  const createMutation = useCreateUIComponent();\n  const updateMutation = useUpdateUIComponent();\n  const deleteMutation = useDeleteUIComponent();\n\n  const handleCreate = async (formData: FormData) => {\n    try {\n      const componentData: InsertUiComponent = {\n        name: formData.get('name') as string,\n        displayName: formData.get('displayName') as string,\n        description: formData.get('description') as string,\n        category: formData.get('category') as string,\n        componentType: formData.get('componentType') as string,\n        version: formData.get('version') as string || '1.0.0',\n        isActive: formData.get('isActive') === 'true',\n        isPublic: formData.get('isPublic') === 'true',\n        config: JSON.parse(formData.get('config') as string || '{}'),\n        template: formData.get('template') as string || undefined,\n        styles: JSON.parse(formData.get('styles') as string || '{}'),\n        interactions: JSON.parse(formData.get('interactions') as string || '{}'),\n        responsive: JSON.parse(formData.get('responsive') as string || '{}'),\n        variants: JSON.parse(formData.get('variants') as string || '[]'),\n        tags: JSON.parse(formData.get('tags') as string || '[]'),\n        dependencies: JSON.parse(formData.get('dependencies') as string || '[]'),\n        previewImage: formData.get('previewImage') as string || undefined,\n      };\n\n      await createMutation.mutateAsync(componentData);\n      toast({\n        title: \"Success\",\n        description: \"Component created successfully\",\n      });\n      setIsCreateDialogOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create component\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdate = async (formData: FormData) => {\n    if (!editingComponent) return;\n    \n    try {\n      const componentData = {\n        name: formData.get('name') as string,\n        displayName: formData.get('displayName') as string,\n        description: formData.get('description') as string,\n        category: formData.get('category') as string,\n        componentType: formData.get('componentType') as string,\n        version: formData.get('version') as string,\n        isActive: formData.get('isActive') === 'true',\n        isPublic: formData.get('isPublic') === 'true',\n        config: JSON.parse(formData.get('config') as string || '{}'),\n        template: formData.get('template') as string || undefined,\n        styles: JSON.parse(formData.get('styles') as string || '{}'),\n        interactions: JSON.parse(formData.get('interactions') as string || '{}'),\n        responsive: JSON.parse(formData.get('responsive') as string || '{}'),\n        variants: JSON.parse(formData.get('variants') as string || '[]'),\n        tags: JSON.parse(formData.get('tags') as string || '[]'),\n        dependencies: JSON.parse(formData.get('dependencies') as string || '[]'),\n        previewImage: formData.get('previewImage') as string || undefined,\n      };\n\n      await updateMutation.mutateAsync({\n        id: editingComponent.id,\n        component: componentData,\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Component updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingComponent(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update component\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = async (component: UiComponent) => {\n    if (!confirm(`Are you sure you want to delete \"${component.displayName}\"?`)) {\n      return;\n    }\n    \n    try {\n      await deleteMutation.mutateAsync(component.id);\n      toast({\n        title: \"Success\",\n        description: \"Component deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete component\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = (component: UiComponent) => {\n    setPreviewComponent(component);\n    setIsPreviewDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Error Loading Components</h2>\n          <p className=\"text-gray-600\">{error.message}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\" data-testid=\"admin-components-page\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">UI Components</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            Manage reusable UI components for the platform\n          </p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-component\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Component\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Component</DialogTitle>\n              <DialogDescription>\n                Create a new reusable UI component that can be used throughout the platform.\n              </DialogDescription>\n            </DialogHeader>\n            <ComponentForm onSubmit={handleCreate} />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <div className=\"mb-6\">\n        <div className=\"flex gap-4 items-center\">\n          <Label htmlFor=\"category-filter\">Filter by Category:</Label>\n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n              <SelectValue placeholder=\"All Categories\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Categories</SelectItem>\n              {Object.entries(COMPONENT_CATEGORIES).map(([key, value]) => (\n                <SelectItem key={key} value={value}>\n                  {key.charAt(0) + key.slice(1).toLowerCase()}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Components Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {components?.map((component: UiComponent) => (\n          <Card key={component.id} className=\"hover:shadow-lg transition-shadow\"\n                data-testid={`component-card-${component.name}`}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg\">{component.displayName}</CardTitle>\n                  <CardDescription>{component.description}</CardDescription>\n                </div>\n                <div className=\"flex gap-1\">\n                  <Badge variant={component.isActive ? \"default\" : \"secondary\"}\n                         data-testid={`badge-status-${component.name}`}>\n                    {component.isActive ? 'Active' : 'Inactive'}\n                  </Badge>\n                  {component.isPublic && (\n                    <Badge variant=\"outline\" data-testid={`badge-public-${component.name}`}>Public</Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"outline\">{component.category}</Badge>\n                  <Badge variant=\"outline\">{component.componentType}</Badge>\n                  <Badge variant=\"outline\">v{component.version}</Badge>\n                </div>\n                \n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  <p>Name: <code className=\"bg-gray-100 dark:bg-gray-800 px-1 rounded\">{component.name}</code></p>\n                  <p>Usage: {component.usageCount} times</p>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handlePreview(component)}\n                    data-testid={`button-preview-${component.name}`}\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setEditingComponent(component);\n                      setIsEditDialogOpen(true);\n                    }}\n                    data-testid={`button-edit-${component.name}`}\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleDelete(component)}\n                    data-testid={`button-delete-${component.name}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {components?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n            No components found{selectedCategory && ` in \"${selectedCategory}\" category`}.\n          </p>\n          <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-first-component\">\n            Create your first component\n          </Button>\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Component</DialogTitle>\n            <DialogDescription>\n              Update the component configuration and properties.\n            </DialogDescription>\n          </DialogHeader>\n          {editingComponent && (\n            <ComponentForm \n              onSubmit={handleUpdate} \n              defaultValues={editingComponent}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Preview Dialog */}\n      <Dialog open={isPreviewDialogOpen} onOpenChange={setIsPreviewDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Component Preview</DialogTitle>\n            <DialogDescription>\n              Preview how the component will render with sample data.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {previewComponent && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"preview-data\">Preview Data (JSON):</Label>\n                <Textarea\n                  id=\"preview-data\"\n                  value={previewData}\n                  onChange={(e) => setPreviewData(e.target.value)}\n                  placeholder=\"{ \"title\": \"Sample Title\", \"description\": \"Sample Description\" }\"\n                  className=\"font-mono text-sm\"\n                  rows={4}\n                  data-testid=\"textarea-preview-data\"\n                />\n              </div>\n              \n              <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-900\">\n                <h4 className=\"font-medium mb-4\">Component Preview:</h4>\n                <div className=\"bg-white dark:bg-gray-800 p-4 rounded border\">\n                  <DynamicComponent\n                    componentId={previewComponent.id}\n                    data={(() => {\n                      try {\n                        return JSON.parse(previewData);\n                      } catch {\n                        return {};\n                      }\n                    })()}\n                    trackUsage={false}\n                    page=\"admin-preview\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface ComponentFormProps {\n  onSubmit: (formData: FormData) => void;\n  defaultValues?: UiComponent;\n}\n\nfunction ComponentForm({ onSubmit, defaultValues }: ComponentFormProps) {\n  const [configValue, setConfigValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.config, null, 2) : '{}'\n  );\n  const [stylesValue, setStylesValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.styles, null, 2) : '{}'\n  );\n  const [interactionsValue, setInteractionsValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.interactions, null, 2) : '{}'\n  );\n  const [responsiveValue, setResponsiveValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.responsive, null, 2) : '{}'\n  );\n  const [variantsValue, setVariantsValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.variants, null, 2) : '[]'\n  );\n  const [tagsValue, setTagsValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.tags, null, 2) : '[]'\n  );\n  const [dependenciesValue, setDependenciesValue] = useState(\n    defaultValues ? JSON.stringify(defaultValues.dependencies, null, 2) : '[]'\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    // Add JSON fields to form data\n    formData.set('config', configValue);\n    formData.set('styles', stylesValue);\n    formData.set('interactions', interactionsValue);\n    formData.set('responsive', responsiveValue);\n    formData.set('variants', variantsValue);\n    formData.set('tags', tagsValue);\n    formData.set('dependencies', dependenciesValue);\n    \n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"form-component\">\n      <Tabs defaultValue=\"basic\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"basic\">Basic</TabsTrigger>\n          <TabsTrigger value=\"config\">Config</TabsTrigger>\n          <TabsTrigger value=\"styling\">Styling</TabsTrigger>\n          <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"basic\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Name (Unique ID)</Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                defaultValue={defaultValues?.name}\n                placeholder=\"e.g., hero-banner-main\"\n                required\n                data-testid=\"input-name\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"displayName\">Display Name</Label>\n              <Input\n                id=\"displayName\"\n                name=\"displayName\"\n                defaultValue={defaultValues?.displayName}\n                placeholder=\"e.g., Main Hero Banner\"\n                required\n                data-testid=\"input-display-name\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              defaultValue={defaultValues?.description || ''}\n              placeholder=\"Describe what this component does...\"\n              data-testid=\"textarea-description\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select name=\"category\" defaultValue={defaultValues?.category}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(COMPONENT_CATEGORIES).map(([key, value]) => (\n                    <SelectItem key={key} value={value}>\n                      {key.charAt(0) + key.slice(1).toLowerCase()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"componentType\">Type</Label>\n              <Select name=\"componentType\" defaultValue={defaultValues?.componentType}>\n                <SelectTrigger data-testid=\"select-component-type\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(COMPONENT_TYPES).map(([key, value]) => (\n                    <SelectItem key={key} value={value}>\n                      {key.charAt(0) + key.slice(1).toLowerCase()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"version\">Version</Label>\n              <Input\n                id=\"version\"\n                name=\"version\"\n                defaultValue={defaultValues?.version || '1.0.0'}\n                placeholder=\"1.0.0\"\n                data-testid=\"input-version\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"isActive\"\n                name=\"isActive\"\n                defaultChecked={defaultValues?.isActive ?? true}\n                data-testid=\"switch-is-active\"\n              />\n              <Label htmlFor=\"isActive\">Active</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"isPublic\"\n                name=\"isPublic\"\n                defaultChecked={defaultValues?.isPublic ?? false}\n                data-testid=\"switch-is-public\"\n              />\n              <Label htmlFor=\"isPublic\">Public</Label>\n            </div>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"config\" className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"config\">Component Configuration (JSON)</Label>\n            <Textarea\n              value={configValue}\n              onChange={(e) => setConfigValue(e.target.value)}\n              placeholder=\"{ \"type\": \"button\", \"label\": \"Click Me\", \"variant\": \"primary\" }\"\n              className=\"font-mono text-sm\"\n              rows={10}\n              data-testid=\"textarea-config\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"template\">Template (HTML/JSX)</Label>\n            <Textarea\n              id=\"template\"\n              name=\"template\"\n              defaultValue={defaultValues?.template || ''}\n              placeholder=\"<div class=\"my-component\">{{title}}</div>\"\n              className=\"font-mono text-sm\"\n              rows={6}\n              data-testid=\"textarea-template\"\n            />\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"styling\" className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"styles\">Styles (JSON)</Label>\n            <Textarea\n              value={stylesValue}\n              onChange={(e) => setStylesValue(e.target.value)}\n              placeholder=\"{ \"className\": \"bg-blue-500 text-white p-4 rounded\" }\"\n              className=\"font-mono text-sm\"\n              rows={8}\n              data-testid=\"textarea-styles\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"responsive\">Responsive Configuration (JSON)</Label>\n            <Textarea\n              value={responsiveValue}\n              onChange={(e) => setResponsiveValue(e.target.value)}\n              placeholder=\"{ \"mobile\": { \"className\": \"text-sm\" }, \"desktop\": { \"className\": \"text-lg\" } }\"\n              className=\"font-mono text-sm\"\n              rows={6}\n              data-testid=\"textarea-responsive\"\n            />\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"advanced\" className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"interactions\">Interactions (JSON)</Label>\n            <Textarea\n              value={interactionsValue}\n              onChange={(e) => setInteractionsValue(e.target.value)}\n              placeholder=\"{ \"onClick\": { \"type\": \"navigate\", \"url\": \"/dashboard\" } }\"\n              className=\"font-mono text-sm\"\n              rows={6}\n              data-testid=\"textarea-interactions\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"variants\">Variants (JSON Array)</Label>\n            <Textarea\n              value={variantsValue}\n              onChange={(e) => setVariantsValue(e.target.value)}\n              placeholder=\"[{ \"name\": \"dark\", \"config\": { \"className\": \"bg-gray-900 text-white\" } }]\"\n              className=\"font-mono text-sm\"\n              rows={4}\n              data-testid=\"textarea-variants\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"tags\">Tags (JSON Array)</Label>\n            <Textarea\n              value={tagsValue}\n              onChange={(e) => setTagsValue(e.target.value)}\n              placeholder=\"[\"featured\", \"homepage\", \"hero\"]\"\n              className=\"font-mono text-sm\"\n              rows={3}\n              data-testid=\"textarea-tags\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"dependencies\">Dependencies (JSON Array)</Label>\n            <Textarea\n              value={dependenciesValue}\n              onChange={(e) => setDependenciesValue(e.target.value)}\n              placeholder=\"[\"button-component\", \"icon-library\"]\"\n              className=\"font-mono text-sm\"\n              rows={3}\n              data-testid=\"textarea-dependencies\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"previewImage\">Preview Image URL</Label>\n            <Input\n              id=\"previewImage\"\n              name=\"previewImage\"\n              defaultValue={defaultValues?.previewImage || ''}\n              placeholder=\"https://example.com/preview.png\"\n              data-testid=\"input-preview-image\"\n            />\n          </div>\n        </TabsContent>\n      </Tabs>\n      \n      <DialogFooter>\n        <Button type=\"submit\" data-testid=\"button-save-component\">\n          {defaultValues ? 'Update Component' : 'Create Component'}\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n}